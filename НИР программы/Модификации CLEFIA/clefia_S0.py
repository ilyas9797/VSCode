import numpy as np
from DDT import get_difs
from itertools import permutations
from operator import itemgetter


CLEFIA_S0 = [0x57, 0x49, 0xd1, 0xc6, 0x2f, 0x33, 0x74, 0xfb,
        0x95, 0x6d, 0x82, 0xea, 0x0e, 0xb0, 0xa8, 0x1c,
        0x28, 0xd0, 0x4b, 0x92, 0x5c, 0xee, 0x85, 0xb1,
        0xc4, 0x0a, 0x76, 0x3d, 0x63, 0xf9, 0x17, 0xaf,
        0xbf, 0xa1, 0x19, 0x65, 0xf7, 0x7a, 0x32, 0x20,
        0x06, 0xce, 0xe4, 0x83, 0x9d, 0x5b, 0x4c, 0xd8,
        0x42, 0x5d, 0x2e, 0xe8, 0xd4, 0x9b, 0x0f, 0x13,
        0x3c, 0x89, 0x67, 0xc0, 0x71, 0xaa, 0xb6, 0xf5,
        0xa4, 0xbe, 0xfd, 0x8c, 0x12, 0x00, 0x97, 0xda,
        0x78, 0xe1, 0xcf, 0x6b, 0x39, 0x43, 0x55, 0x26,
        0x30, 0x98, 0xcc, 0xdd, 0xeb, 0x54, 0xb3, 0x8f,
        0x4e, 0x16, 0xfa, 0x22, 0xa5, 0x77, 0x09, 0x61,
        0xd6, 0x2a, 0x53, 0x37, 0x45, 0xc1, 0x6c, 0xae,
        0xef, 0x70, 0x08, 0x99, 0x8b, 0x1d, 0xf2, 0xb4,
        0xe9, 0xc7, 0x9f, 0x4a, 0x31, 0x25, 0xfe, 0x7c,
        0xd3, 0xa2, 0xbd, 0x56, 0x14, 0x88, 0x60, 0x0b,
        0xcd, 0xe2, 0x34, 0x50, 0x9e, 0xdc, 0x11, 0x05,
        0x2b, 0xb7, 0xa9, 0x48, 0xff, 0x66, 0x8a, 0x73,
        0x03, 0x75, 0x86, 0xf1, 0x6a, 0xa7, 0x40, 0xc2,
        0xb9, 0x2c, 0xdb, 0x1f, 0x58, 0x94, 0x3e, 0xed,
        0xfc, 0x1b, 0xa0, 0x04, 0xb8, 0x8d, 0xe6, 0x59,
        0x62, 0x93, 0x35, 0x7e, 0xca, 0x21, 0xdf, 0x47,
        0x15, 0xf3, 0xba, 0x7f, 0xa6, 0x69, 0xc8, 0x4d,
        0x87, 0x3b, 0x9c, 0x01, 0xe0, 0xde, 0x24, 0x52,
        0x7b, 0x0c, 0x68, 0x1e, 0x80, 0xb2, 0x5a, 0xe7,
        0xad, 0xd5, 0x23, 0xf4, 0x46, 0x3f, 0x91, 0xc9,
        0x6e, 0x84, 0x72, 0xbb, 0x0d, 0x18, 0xd9, 0x96,
        0xf0, 0x5f, 0x41, 0xac, 0x27, 0xc5, 0xe3, 0x3a,
        0x81, 0x6f, 0x07, 0xa3, 0x79, 0xf6, 0x2d, 0x38,
        0x1a, 0x44, 0x5e, 0xb5, 0xd2, 0xec, 0xcb, 0x90,
        0x9a, 0x36, 0xe5, 0x29, 0xc3, 0x4f, 0xab, 0x64,
        0x51, 0xf8, 0x10, 0xd7, 0xbc, 0x02, 0x7d, 0x8e
    ]


sboxes = {'CLEFIA_SS0': [0xe, 0x6, 0xc, 0xa, 0x8, 0x7, 0x2, 0xf, 0xb, 0x1, 0x4, 0x0, 0x5, 0x9, 0xd, 0x3],
    'CLEFIA_SS1': [0x6, 0x4, 0x0, 0xd, 0x2, 0xb, 0xa, 0x3, 0x9, 0xc, 0xe, 0xf, 0x8, 0x7, 0x5, 0x1],
    'CLEFIA_SS2': [0xb, 0x8, 0x5, 0xe, 0xa, 0x6, 0x4, 0xc, 0xf, 0x7, 0x2, 0x3, 0x1, 0x0, 0xd, 0x9],
    'CLEFIA_SS3': [0xa, 0x2, 0x6, 0xd, 0x3, 0x4, 0x5, 0xe, 0x0, 0x7, 0x8, 0x9, 0xb, 0xf, 0xc, 0x1],
    'PRESENT':  [0xC, 5, 6, 0xB, 9, 0, 0xA, 0xD, 3, 0xE, 0xF, 8, 4, 7, 1, 2],
    'MIDORI':   [0xC, 0xA, 0xD, 3, 0xE, 0xB, 0xF, 7, 8, 9, 1, 5, 0, 2, 4, 6],
    'GIFT':     [1, 0xA, 4, 0xC, 6, 0xF, 3, 9, 2, 0xD, 0xB, 7, 5, 0, 8, 0xE],
    'SKINNY1':  [0xC, 6, 9, 0, 1, 0xA, 2, 0xB, 3, 8, 5, 0xD, 4, 0xE, 7, 0xF],
    'SKINNY2':  [3, 4, 6, 8, 0xC, 0xA, 1, 0xE, 9, 2, 5, 7, 0, 0xB, 0xD, 0xF],
    'LILLIPUT': [4, 8, 7, 1, 9, 3, 2, 0xE, 0, 0xB, 3, 0xF, 0xA, 5, 0xD, 0xC],
}

sboxes_list = list(sboxes.items())


# const = 2 в GF16 c f(x)=x^4+x+1
const = np.array([
        [0, 0, 1, 1],
        [1, 0, 0, 0],
        [0, 1, 0, 0],
        [0, 0, 1, 0]
    ])


def mul_on_2_under_GF16(x):
    v = np.array(list(map(int, '{0:04b}'.format(x))))
    r = list(v @ const)
    return int(''.join(str(i % 2) for i in r), 2)


def clefia_S0(x, SS0, SS1, SS2, SS3):
    bin_x = '{0:08b}'.format(x)
    x0, x1 = int(bin_x[:4], 2), int(bin_x[4:], 2)
    x0, x1 = SS0[x0], SS1[x1]
    y0, y1 = mul_on_2_under_GF16(x0), mul_on_2_under_GF16(x1)
    x0, x1 = x0 ^ y1, x1 ^ y0
    x0, x1 = SS2[x0], SS3[x1]
    return int('{0:04b}'.format(x0) + '{0:04b}'.format(x1), 2)


def comb(n, k):
    """Генерация сочетаний из `n` по `k` без повторений."""

    d = list(range(0, k))
    yield list(map(lambda x: x+1, d))

    while True:
        i = k - 1
        while i >= 0 and d[i] + k - i + 1 > n:
            i -= 1
        if i < 0:
            return

        d[i] += 1
        for j in range(i + 1, k):
            d[j] = d[j - 1] + 1

        yield list(map(lambda x: x+1, d))


def get_best_sbox(j):
    new_sboxs_difs = []

    # for j in permutations(comb):

    SS0, SS1, SS2, SS3 = sboxes_list[j[0]-1], sboxes_list[j[1]-1], sboxes_list[j[2]-1],sboxes_list[j[3]-1]
    name = SS0[0] + ' ' + SS1[0] + ' ' + SS2[0] + ' ' + SS3[0]

    new_sbox = []
    for x in range(256):
        new_sbox.append(
            clefia_S0(
                x,
                SS0[1],
                SS1[1],
                SS2[1],
                SS3[1]
            )
        )
    difs = get_difs(new_sbox)
    new_sboxs_difs.append(
        (name, difs)
    )
    return min(new_sboxs_difs, key=itemgetter(1))


if __name__ == '__main__':
    best_sboxes = []
    for i in comb(len(sboxes_list), 4):
        print(i)
        best_sboxes.append(get_best_sbox(i))
    
    print(min(best_sboxes, key=itemgetter(1)))
